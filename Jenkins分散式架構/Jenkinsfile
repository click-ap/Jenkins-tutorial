def JOBID='GCPIAMJenkins'

import groovy.transform.Field
//def PROJECT_ID, IAM_ACCOUNT
@Field def SA_EMAIL
@Field def PROJECT_NUMBER
@Field def PACK_IMAGE_NAME
@Field def PACK_IMAGE_FAMILY= "clickap"
@Field def DEFAULT_SERVICE_ACCOUNT= "${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
@Field def IMAGETEMPLATENAME= 'it-loadtest'
@Field def MACHINETYPE= 'n1-standard-1'
@Field def IMAGEGROUPNAME= 'ig-loadtest'
@Field def HCHECK= 'moodle-check'
@Field def REGION= "us-central1" // asia-east1
@Field def ZONES= 'us-central1-b,us-central1-c,us-central1-f' // asia-east1-a,asia-east1-b,asia-east1-c
@Field def ZONE= 'us-central1-a'

/**
    Update 26Oct2021, 在 GCP Project 內, 建一個IAM, 用這個帳號, 從Market開1台 Jenkin。
    1. 在 GCloud 建一個 Jenkins 用的帳號, (IAM 部份需回到 console.cloud.google.com 用 GCloud Shell 用)
    2. 用 Packer 建一個 image 

    ref: https://cloud.google.com/architecture/using-jenkins-for-distributed-builds-on-compute-engine

    1. Get rmi_keystore.jks
    2. Disable rmi.ssl
    3. Set jmeter.log permission
    Startup script:
        wget -q https://raw.githubusercontent.com/clickap/chem2021/main/rmi_keystore.jks
        sudo cp rmi_keystore.jks /usr/share/jmeter/bin/

        cp /usr/share/jmeter/bin/log4j2.xml $HOME/
        cp /usr/share/jmeter/bin/user.properties $HOME/
        sudo sed -i '/.*#server.rmi.ssl.disable/a server.rmi.ssl.disable=true' /usr/share/jmeter/bin/user.properties
        sed -i 's|\\\${sys:jmeter.logfile:-jmeter.log}|\$HOME/jmeter.log|' /usr/share/jmeter/bin/log4j2.xml

        cd /usr/share/jmeter/bin && ./jmeter-server -Dsun.rmi.transport.tcp.logLevel=verbose 
        jmeter-server -Dsun.rmi.transport.tcp.logLevel=verbose -Djava.rmi.server.hostname=192.168.50.2

    在 GCP 建好 debian 10 後, 建立單一台 Jenkins 
    參考: https://cloud.google.com/architecture/using-jenkins-for-distributed-builds-on-compute-engine

**/
properties([
    parameters([
        booleanParam(name: 'dryRun', defaultValue: false),
        credentials(name: 'PROJECT_ID', credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl', defaultValue: 'chem2021', required: true),
        booleanParam(name: 'doClean', defaultValue: true, description: 'Clean Workspace'),
        string(name: 'IAM_ACCOUNT', trim: true, defaultValue: 'jankin'),
        booleanParam(name: 'packImage', defaultValue: true, description: 'Pack Jenkins node -image'),
        string(name: 'IMAGENAME', defaultValue: 'jenkins-agent'),
        string(name: 'TEMPLATENAME', defaultValue: 'it-jjmeter'),
        string(name: 'GROUPNAME', defaultValue: 'ig-jjmeter'),
        booleanParam(name: 'downloadKey', defaultValue: false, description: 'Create key and download(json)'),
        string(name: 'CIEMAIL', trim: true, defaultValue: "jankin@click-ap.com", description: '')
    ])
])

//def _now= new Date().getTime() / 1000
//def _now= System.currentTimeMillis()
def _now= new Date().format( 'yyyyMMddHHmm' )
PACK_IMAGE_NAME= IMAGENAME?.trim() ? "${IMAGENAME}" : "${JOBID}-${_now}"
IMAGETEMPLATENAME= TEMPLATENAME?.trim() ? "${TEMPLATENAME}" : "${IMAGETEMPLATENAME}"
//IMAGEGROUPNAME= GROUPNAME?.trim() ? "${GROUPNAME}" : "${IMAGEGROUPNAME}"
IMAGEGROUPNAME= GROUPNAME.trim()

def dryRun= Boolean.valueOf(dryRun)
def boolDryRun= dryRun ? 'v':'X' // ✓
def doClean= Boolean.valueOf(doClean)
def boolClean= doClean ? '✓':'X'
def packImage= Boolean.valueOf(packImage)
def boolInstall= packImage ? 'v':'X'
def downloadKey= Boolean.valueOf(downloadKey)

def brifeDesc= """
   JOB_NAME(BASE): ${JOB_NAME}(${JOB_BASE_NAME})
-------------------------------
       PROJECT_ID: ${PROJECT_ID}
      IAM_ACCOUNT: ${IAM_ACCOUNT}
-------------------------------
           dryRun: (${boolDryRun})
            Clean: ${boolClean}(${doClean})
        packImage: ${packImage}(${boolInstall})
      downloadKey: ${downloadKey}
-------------------------------
  PACK_IMAGE_NAME: ${PACK_IMAGE_NAME}
IMAGETEMPLATENAME: ${IMAGETEMPLATENAME}
   IMAGEGROUPNAME: ${IMAGEGROUPNAME}
-------------------------------
"""
echo "${brifeDesc}"

def leftCol = 18
def _output= """+---------------------------------------------------------------------------------------------+\n"""
_output+= "| " + sprintf("%${leftCol}s: ", 'JOB_NAME')
_output+= sprintf('%-20s %-50s |\n', JOB_NAME, JOB_URL)
_output+= """+---------------------------------------------------------------------------------------------+\n"""
_output+= "| " + sprintf("%${leftCol}s: ", 'PROJECT_ID')
_output+= sprintf('%-70s  |\n', PROJECT_ID)
_output+= "| " + sprintf("%${leftCol}s: ", 'IAM_ACCOUNT')
_output+= sprintf('%-70s  |\n', IAM_ACCOUNT)
_output+= """+---------------------------------------------------------------------------------------------+\n"""
_output+= "| " + sprintf("%${leftCol}s: ", 'dryRun')
_output+= sprintf('%-70s  |\n', "(${dryRun})${boolDryRun}" )
_output+= "| " + sprintf("%${leftCol}s: ", 'JenkinsInstall')
_output+= sprintf('%-70s  |\n', packImage )
_output+= "| " + sprintf("%${leftCol}s: ", 'PACK_IMAGE_NAME')
_output+= sprintf('%-70s  |\n', "${PACK_IMAGE_NAME}" )
_output+= "| " + sprintf("%${leftCol}s: ", 'IMAGETEMPLATENAME')
_output+= sprintf('%-70s  |\n', "${IMAGETEMPLATENAME}" )
_output+= "| " + sprintf("%${leftCol}s: ", 'IMAGEGROUPNAME')
_output+= sprintf('%-70s  |\n', "${IMAGEGROUPNAME}" )
_output+= """+---------------------------------------------------------------------------------------------+\n"""
println _output

if (!IAM_ACCOUNT?.trim()) {
    throw new Exception("The IAM_ACCOUNT is null or empty!")
}

def cmdResult
def emailText="GCP工作 - ${JOBID}: GCP - ${PROJECT_ID}-(IAM_帳號: ${IAM_ACCOUNT}) \n${brifeDesc}" 
node ('master') {
    stage('GCloud') {
        if (doClean) {
            cleanWs()   // requires workspace cleanup plugin to be installed
        }
        checkout scm
        // For Jenkins in Buster(debign10)
        sh """#!/bin/bash 
            {
                gcloud --version
            } || {
                echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                sudo apt-get install -y apt-transport-https ca-certificates gnupg
                curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
                sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            } """
    }

    stage('IAM') {
        // Deal with GCloud (e. Deploy to GCP)
        withCredentials([file(credentialsId: PROJECT_ID, variable: 'FILE')]) {
            GOOGLE_SERVICE_ACCOUNT_KEY= "$FILE"
            sh """#!/bin/bash
                set -eu
                gcloud config set project ${PROJECT_ID};
                gcloud auth activate-service-account --key-file ${FILE};

                gcloud services enable cloudresourcemanager.googleapis.com
                // Stackdriver
                gcloud services enable monitoring

                LIST=`gcloud iam service-accounts list`
                SOURCE="${IAM_ACCOUNT}@${PROJECT_ID}" # jankin@chem2021.iam.gserviceaccount.com
                if echo "\$LIST" | grep -q "\$SOURCE"; then
                    echo "Service account ${IAM_ACCOUNT} already exists."
                else
                    gcloud iam service-accounts create ${IAM_ACCOUNT} --display-name ${IAM_ACCOUNT}
                fi

                gcloud config list;

                # export PROJECT=\$(gcloud info --format='value(config.project)')
                # export SA_EMAIL=\$(gcloud iam service-accounts list --filter="displayName:${IAM_ACCOUNT}" --format='value(email)')

                LIST=`gcloud compute firewall-rules list`
                SOURCE="jmeter" 
                if echo "\$LIST" | grep -q "\$SOURCE"; then
                    echo "Firewall [jmeter] already exists."
                else
                    gcloud compute firewall-rules create jmeter --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:1099,tcp:4000-4002 --source-ranges=0.0.0.0/0 
                    # --target-tags=jmeter-remote
                fi
            """

            // gcloud projects list --filter="\$(gcloud config get-value project)" --format="value(PROJECT_NUMBER)"
            cmdResult = sh returnStdout: true, script: "gcloud projects list --filter='${PROJECT_ID}' --format='value(PROJECT_NUMBER)'"
            if (! cmdResult?.trim() ){
                error "PROJECT_NUMBER 取得有問題."
            }
            PROJECT_NUMBER= cmdResult.trim()
            DEFAULT_SERVICE_ACCOUNT= "${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
            
            // gcloud iam service-accounts list --filter="displayName:jenkins" --format='value(email)
            cmdResult = sh returnStdout: true, script: "gcloud iam service-accounts list --filter='displayName:${IAM_ACCOUNT}' --format='value(email)'"
            if (! cmdResult?.trim() ){
                error "SA_EMAIL 取得有問題."
            }
            SA_EMAIL= cmdResult.trim()
            echo getIamPolicyMsg(DEFAULT_SERVICE_ACCOUNT, PROJECT_ID, SA_EMAIL)
            echo "並且下載[jenkins-sa.json]: gcloud iam service-accounts keys create jenkins-sa.json --iam-account ${SA_EMAIL}"
        }
    }

    stage('Packer provision') {
        // Packer - Google Compute Builder => https://www.packer.io/docs/builders/googlecompute
        sh """
            { # try
                packer --version
            } || { # catch
                set -ex
                wget https://releases.hashicorp.com/packer/1.6.6/packer_1.6.6_linux_amd64.zip -qO packer.zip
                unzip packer.zip
                sudo mv packer /usr/local/bin
            }"""
        // 1. Prepare SSH-key
        withCredentials([file(credentialsId: PROJECT_ID, variable: 'FILE')]) {
            sh """#!/bin/bash
                if [ ! -f 'sshKeys.pub' ]; then
                    gcloud config set project ${PROJECT_ID};
                    gcloud auth activate-service-account --key-file ${FILE};

                    gcloud compute project-info describe --format=json | jq -r '.commonInstanceMetadata.items[] | select(.key == "ssh-keys") | .value' > sshKeys.pub
                    echo "\$USER:\$(cat ~/.ssh/id_rsa.pub)" >> sshKeys.pub
                    gcloud compute project-info add-metadata --metadata-from-file ssh-keys=sshKeys.pub
                fi
            """
            // echo "\$USER:\$(cat ~/.ssh/id_rsa.pub)" >> sshKeys.pub ==> Jenkins 本身的 key
        }
    }

    stage('Pack image') {
        // 3. Create the baseline image
        if(packImage) {
            withCredentials([file(credentialsId: PROJECT_ID, variable: 'FILE')]) {
                // check image name
                // cmdResult = sh returnStdout: true, script: """
                //     { # try
                //         gcloud compute images list --filter="family:${PACK_IMAGE_FAMILY}" --format="value(NAME)" | grep '${PACK_IMAGE_NAME}' 
                //     } || { 
                //         echo ''
                //     }
                // """
                // if (cmdResult?.trim() ){
                //     sh "gcloud compute images delete ${PACK_IMAGE_NAME}"
                // } 
                sh """
                    { #try
                        gcloud compute images delete ${PACK_IMAGE_NAME}
                    } || {
                        echo ''
                    }
                """
                def _json = getAgentJson(PROJECT_ID, PACK_IMAGE_NAME, ZONE, "skyap")
                if(dryRun) { println _json }
                sh """${_json}"""

                // Packer Build
                sh """#!/bin/bash
                    set -ex
                    gcloud config set project ${PROJECT_ID};
                    gcloud auth activate-service-account --key-file ${FILE};

                    export GOOGLE_APPLICATION_CREDENTIALS=${FILE}
                    cat jenkins-agent.json
                    packer build jenkins-agent.json
                """
            }
            echo "Image(映像檔) - ${PACK_IMAGE_NAME} 產生完成."
        }
    }

    stage('Download Key') {
        if(downloadKey) {
            withCredentials([file(credentialsId: PROJECT_ID, variable: 'FILE')]) {
                sh """#!/bin/bash
                    set -ex
                    gcloud config set project ${PROJECT_ID};
                    gcloud auth activate-service-account --key-file ${FILE};

                    gcloud iam service-accounts keys create --iam-account ${SA_EMAIL} jenkins-sa.json 
                    """
                archiveArtifacts("jenkins-sa.json")
            }
        }
    }

    stage("Create Template") {
        sh """#!/bin/bash
            set -ex
            #{ # try
            #    gcloud beta compute instance-groups managed delete ${IMAGEGROUPNAME}
            #} || {
            #    echo ''
            #}
            { # try
                gcloud beta compute instance-templates delete ${IMAGETEMPLATENAME}
            } || {
                echo ''
            }
            gcloud beta compute instance-templates create ${IMAGETEMPLATENAME} \
                --machine-type=${MACHINETYPE} --service-account=${SA_EMAIL} --tags=jmeter-server \
                --image=${PACK_IMAGE_NAME} --image-project=${PROJECT_ID} --boot-disk-size=10GB --boot-disk-type=pd-balanced \
                --metadata=startup-script=wget\\ https://raw.githubusercontent.com/clickap/chem2021/main/rmi_keystore.jks\$'\\n'sudo\\ cp\\ rmi_keystore.jks\\ /usr/share/jmeter/bin/ 
        """
        // --boot-disk-type=pd-ssd or pd-balanced
        def doneStr= "GCP - Image Template(執行範本) ${IMAGETEMPLATENAME} 產生完成(映像檔: ${PACK_IMAGE_NAME})"
        emailext body: emailText, recipientProviders: [buildUser()], subject: "${doneStr}", to: "${CIEMAIL}", attachLog: true
        println "${doneStr}"
    }

    stage('Create Instance Group') {
        // "--health-check=${HCHECK}"
        if(IMAGEGROUPNAME?.trim()) {
            sh """#!/bin/bash
                gcloud beta compute instance-groups managed create ${IMAGEGROUPNAME} \
                    --base-instance-name=${IMAGEGROUPNAME} --template=${IMAGETEMPLATENAME} \
                    --size=1 --zones=${ZONES} 

                gcloud beta compute instance-groups managed set-autoscaling "${IMAGEGROUPNAME}" \
                    --region "${REGION}" --min-num-replicas "1" --max-num-replicas "10" \
                    --cool-down-period "60" --target-cpu-utilization "0.6" --mode "on"
            """
        }
    }

}

String getIamPolicyMsg(DEFAULT_SERVICE_ACCOUNT, PROJECT_ID, SA_EMAIL) {
    return """
因為 ${PROJECT_ID} 預設服務帳戶(${DEFAULT_SERVICE_ACCOUNT})權限(有限制)的關係.
需要手動(Please go to Google Cloud Shell)下指令:
    gcloud config set project ${PROJECT_ID}
    gcloud projects add-iam-policy-binding ${PROJECT_ID} --role roles/storage.admin --member serviceAccount:${SA_EMAIL}
    gcloud projects add-iam-policy-binding ${PROJECT_ID} --role roles/compute.instanceAdmin.v1 --member serviceAccount:${SA_EMAIL}
    gcloud projects add-iam-policy-binding ${PROJECT_ID} --role roles/compute.networkAdmin --member serviceAccount:${SA_EMAIL}
    gcloud projects add-iam-policy-binding ${PROJECT_ID} --role roles/compute.securityAdmin --member serviceAccount:${SA_EMAIL}
    gcloud projects add-iam-policy-binding ${PROJECT_ID} --role roles/iam.serviceAccountActor --member serviceAccount:${SA_EMAIL}
"""
}

String getAgentJson(PROJECT_ID, PACK_IMAGE_NAME, ZONE, SSH_Userame) {
    def srcImageFamily= "ubuntu-2004-lts"
    def srcImageProjectId= "ubuntu-os-cloud"
    def imageName= PACK_IMAGE_NAME?.trim() ?  "${PACK_IMAGE_NAME}" : "jenkins-agent-{{timestamp}}"
    def imageFamily= PACK_IMAGE_FAMILY
    // jmeter -:qJjmeter.save.saveservice.output_format=xml -n -t jmeter-example.jmx -l result.jtl
    return """
    cat > jenkins-provision.sh <<EOF
#!/bin/bash  
set -ex
sudo apt-get update
sudo apt-get install -y default-jdk
sudo apt-get autoremove -y

wget https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.4.1.tgz -qO apache-jmeter.tgz
tar zxf apache-jmeter.tgz
sudo mv apache-jmeter-* /usr/share/jmeter
sudo sed -i '/#server.rmi.port=.*/a server.rmi.port=4000' /usr/share/jmeter/bin/jmeter.properties
sudo sed -i '/#client.rmi.localport=.*/a client.rmi.localport=4000' /usr/share/jmeter/bin/jmeter.properties
sudo sed -i '/#server.rmi.ssl.disable=.*/a server.rmi.ssl.disable=true' /usr/share/jmeter/bin/jmeter.properties
sudo sed -i '/.*#jmeter.save.saveservice.output_format.*/a jmeter.save.saveservice.output_format=xml' /usr/share/jmeter/bin/jmeter.properties
sudo ln -s /usr/share/jmeter/bin/jmeter /usr/bin/jmeter
sudo ln -s /usr/share/jmeter/bin/jmeter-server /usr/bin/jmeter-server
export JMETER_HOME=/usr/share/jmeter
wget https://raw.githubusercontent.com/flood-io/load-testing-playground/master/jmeter/jmeter-example.jmx -qO jmeter-example.jmx

wget -q https://raw.githubusercontent.com/clickap/chem2021/main/rmi_keystore.jks
sudo cp rmi_keystore.jks /usr/share/jmeter/bin/

cp /usr/share/jmeter/bin/log4j2.xml /home/${SSH_Userame}/
cp /usr/share/jmeter/bin/user.properties /home/${SSH_Userame}/
sudo sed -i '/.*#server.rmi.ssl.disable/a server.rmi.ssl.disable=true' /usr/share/jmeter/bin/user.properties
JMETERLOGPATH="s|\\\${sys:jmeter.logfile:-jmeter.log}|\$HOME/jmeter.log|"
sed -i "\${JMETERLOGPATH}" /usr/share/jmeter/bin/log4j2.xml
EOF

            cat > jenkins-agent.json <<EOF
{
  "builders": [
    {
      "type": "googlecompute",
      "project_id": "${PROJECT_ID}",
      "source_image_family": "${srcImageFamily}",
      "source_image_project_id": "${srcImageProjectId}",
      "zone": "${ZONE}",
      "disk_size": "10",
      "image_name": "${imageName}",
      "image_family": "${imageFamily}",
      "ssh_username": "${SSH_Userame}",
      "tags": ["jmeter-remote"]
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "script": "jenkins-provision.sh"
    }
  ]
}
"""
// EOF
    """{
      "type": "shell",
      "inline": ["sudo apt-get update && sudo apt-get install -y default-jdk"]
    }"""
    """wget https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.4.1.tgz -qO apache-jmeter.tgz
    tar zxf apache-jmeter.tgz
    mv apache-jmeter-* jmeter
    export JMETER_HOME=/home/skyap/jmeter """
}

@NonCPS
def getHostName(WWWNAME) {
    def _hostname = ''
    //def regex = /(\w+).([.\w]+)/ // not include dash
    def regex = /([\w'-]+).([.\w]+)/
    def matcher = ( WWWNAME =~ regex )
    if (matcher.matches()) {
        _hostname = matcher[0][1]
    }
    return _hostname
}

def detectHTTPS(WWWNAME) {
    // echo | openssl s_client -showcerts -servername 0423.edx.com.tw -connect 0423.edx.com.tw:443 2>/dev/null | openssl x509 -inform pem -noout -subject
    def _script = "echo | openssl s_client -showcerts -servername ${WWWNAME} -connect ${WWWNAME}:443 2>/dev/null | openssl x509 -inform pem -noout -subject"
    //def subjectStr = sh(script: _script, returnStdout: true).trim ()
    def subjectStr=''
    def subjectArray
    def _subject=''
    try {
        subjectStr = sh(script: _script, returnStdout: true).trim ()
        echo "subjectStr: ${subjectStr}"
        subjectArray = subjectStr.split(/CN[ ]*=/);
        echo "subjectArray: ${subjectArray}"
        _subject = subjectArray[1].trim()
        echo "Subject: ${_subject}"
    }
    catch (e) {
        echo 'openssl s_client failed: ' + e.toString()
    }
    return (_subject == WWWNAME)
}

@NonCPS
def getOSCode(prettyName) {
    def _os, _ver, _oscode = 'UNKNOW'
    // def regex= /\W(\w*)\s[a-z_A-Z\/]*\s([0-9]{1,2}).*/
    // def regex= /\W(\w*)\s([a-z_A-Z\/]*|[0-9]{1,2}\.[0-9]{1,2}\.[0-9]+)\s([0-9]{1,2}|\w).*/
    def regex= /[\"]?(\w*)\s([a-z_A-Z\/]*|\d+\.?\d+\.?\d+)\s([0-9]{1,2}|\w).*/
    // PRETTY_NAME="Ubuntu 16.04.7 LTS"
    // PRETTY_NAME="Debian GNU/Linux 10 (buster)"
    // PRETTY_NAME="Ubuntu 18.04.5 LTS"
    // PRETTY_NAME="CentOS Linux 7 (Core)"
    def matcher = ( prettyName =~ regex )
    if (matcher.matches()) {
        echo matcher[0].dump()
        _os = matcher[0][1]
        m1 = matcher[0][2]
        m2 = matcher[0][3]
    }
    switch(_os) {
    case "CentOS":
        OSNAME= 'centos'
        if (m2 == '7') {
            _oscode= 'centos7'
        }
    case "Debian":
        OSNAME= 'debian'
        if (m2 == '10') {
            _oscode= 'buster'
        }
        break; 
    case "Ubuntu":
        OSNAME= 'ubuntu'
        if (m1.startsWith('20')) {
            _oscode= 'focal'
        }
        if (m1.startsWith('18')) {
            _oscode= 'bionic'
        }
        if (m1.startsWith('16')) {
            _oscode= 'xenial'
        }
        break; 
    default: 
        println("The OS is unknown"); 
        break; 
    }
    return _oscode
}
